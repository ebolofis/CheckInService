
@model CheckinBack.Models.FastCheckInExtModel

@{
    Layout = "~/Views/Shared/_LayoutSignature.cshtml";
}

<div class="container" style="width:100%;">
    <div class="row">
        <div class="col-xs-12">
            <br />
            <form data-bind="with: LanguageHandler">
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                        <div class="text-center">
                            <img width="350" height="120" src="~/images/Resources/mitsis.png" data-bind="attr: { 'src' : page2.HotelLogo() }">
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                        <br />
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                        <div class="bordered title-1" data-bind="text: selectedDictionary() != null?selectedDictionary().HeaderSignatureTxt:null"></div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                        <br />
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                        <label style=" font-family: Montserrat; font-size: 12px; " data-bind="html: selectedDictionary() != null?selectedDictionary().privacyPolicyDescription:null"></label>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                        <br />
                        <br />
                    </div>
                    <div class="container" data-bind="visible: page2.baseInfoModel() != null && page2.baseInfoModel().Mode != 4">
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                <div class="text-center">
                                    <canvas id="sig-canvas">
                                    </canvas>
                                </div>
                            </div>
                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                <div class="text-center">
                                    <label style="font-family:Montserrat; font-size:14px;" data-bind="text: selectedDictionary() != null?selectedDictionary().SignHereTxt:null"></label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                        <br />
                        <br />
                    </div>
                    <div class="col-xs-8 col-xs-offset-2" data-bind="visible: page2.baseInfoModel() != null && page2.baseInfoModel().Mode != 4">
                        <div class="row">
                            <div class="col-xs-12">
                                <button id="sig-submitBtn" type="button" class="btn btn-success btn-block ld-ext-right" style="background:#ac9766;" data-bind="enable: !page2.Loading()">
                                    Check-in
                                    <span data-bind="visible: page2.Loading()" class="ld ld-ring ld-spin"></span>
                                </button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-6">
                                <button type="button" onclick="CancelFunction()" class="btn btn-success btn-block" style="background:#D3D3D3;" data-bind="text: selectedDictionary() != null?selectedDictionary().CancelBtnTxt:null"></button>
                            </div>
                            <div class="col-xs-6">
                                <button type="button" class="btn btn-success btn-block" style="background:#ac9766;" id="sig-clearBtn" data-bind="text: selectedDictionary() != null?selectedDictionary().ClearBtnTxt:null"></button>
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-8 col-xs-offset-2" data-bind="visible: page2.baseInfoModel() != null && page2.baseInfoModel().Mode == 4">
                        <div class="row">
                            <div class="col-xs-12">
                                <button type="button" onclick="CancelFunction()" class="btn btn-success btn-block" style="background:#D3D3D3;" data-bind="text: selectedDictionary() != null?selectedDictionary().CancelBtnTxt:null"></button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    var page2 = this;
    page2.HotelLogo = ko.observable(null);
    page2.Loading = ko.observable(false);
    page2.baseInfoModel = ko.observable(null);
    page2.Signature = null;

    var xhr = new XMLHttpRequest();
    xhr.onload = function () {
        const ele = document.getElementById("contentMainFormMitsis");
    };
    

     function GetHotelLogo() {
        $.ajax({
            url: "/FC/GetHotelLogo?hotelId=" + localStorage.ConfigHotelName,
            cache: false,
            type: "GET",
            crossdomain: false,
            dataType: "json",
            ContentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response !== undefined && response !== null) {
                    let hotelLogo = "data:image/png;base64," + response.Logo;
                    page2.HotelLogo(hotelLogo);
                } else {
                     console.log("Unable to get hotelLogo with id: " + localStorage.ConfigHotelName + "!");
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    };

    $(document).ready(function () {
        LanguageHandler.SetHotelID(localStorage.ConfigHotelName);
        LanguageHandler.SetApi(localStorage.ConfigURL);
        LanguageHandler.GetTranslations();
        GetHotelLogo();
        var baseInfoModelTmp = JSON.parse(localStorage.baseinfo);
        page2.baseInfoModel(baseInfoModelTmp);
    });

    function CancelFunction() {
        if (page2.baseInfoModel().Mode == 2 || page2.baseInfoModel().Mode == 4) {
            localStorage.backButtonFlag = true;
            var link = localStorage.ConfigURL + "FC/redirect?u=&str=" + page2.baseInfoModel().String1Encrypted + "&h=" + localStorage.ConfigHotelName;
            window.location.href = link;
        }
        else {
            localStorage.backButtonFlag = true;
            var link = localStorage.ConfigURL + "FC/GetSettings?u=&g=" + localStorage.ConfigGroupName + "&h=" + localStorage.ConfigHotelName;
            window.location.href = link;
        }
    }

    (function () {
        window.requestAnimFrame = (function (callback) {
            return window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimaitonFrame ||
                function (callback) {
                    window.setTimeout(callback, 1000 / 60);
                };
        })();

        var canvas = document.getElementById("sig-canvas");
        var ctx = canvas.getContext("2d");
        ctx.strokeStyle = "#222222";
        ctx.lineWidth = 4;

        var drawing = false;
        var mousePos = {
            x: 0,
            y: 0
        };
        var lastPos = mousePos;

        canvas.addEventListener("mousedown", function (e) {
            e.preventDefault();
            drawing = true;
            lastPos = getMousePos(canvas, e);
        }, false);

        canvas.addEventListener("mouseup", function (e) {
            drawing = false;
        }, false);

        canvas.addEventListener("mousemove", function (e) {
            e.preventDefault();
            mousePos = getMousePos(canvas, e);
        }, false);

        // Add touch event support for mobile
        canvas.addEventListener("touchstart", function (e) {
            e.preventDefault();
        }, false);

        canvas.addEventListener("touchmove", function (e) {
            var touch = e.touches[0];
            var me = new MouseEvent("mousemove", {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            canvas.dispatchEvent(me);
        }, false);

        canvas.addEventListener("touchstart", function (e) {
            mousePos = getTouchPos(canvas, e);
            var touch = e.touches[0];
            var me = new MouseEvent("mousedown", {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            canvas.dispatchEvent(me);
        }, false);

        canvas.addEventListener("touchend", function (e) {
            var me = new MouseEvent("mouseup", {});
            canvas.dispatchEvent(me);
        }, false);

        function getMousePos(canvasDom, mouseEvent) {
            var rect = canvasDom.getBoundingClientRect();
            return {
                x: mouseEvent.clientX - rect.left,
                y: mouseEvent.clientY - rect.top
            }
        }

        function getTouchPos(canvasDom, touchEvent) {
            var rect = canvasDom.getBoundingClientRect();
            return {
                x: touchEvent.touches[0].clientX - rect.left,
                y: touchEvent.touches[0].clientY - rect.top
            }
        }

        function renderCanvas() {
            if (drawing) {
                ctx.moveTo(lastPos.x, lastPos.y);
                ctx.lineTo(mousePos.x, mousePos.y);
                ctx.stroke();
                lastPos = mousePos;
            }
        }

        // Prevent scrolling when touching the canvas
        document.body.addEventListener("touchstart", function (e) {
            if (e.target == canvas) {
                e.preventDefault();
            }
        }, false);
        document.body.addEventListener("touchend", function (e) {
            if (e.target == canvas) {
                e.preventDefault();
            }
        }, false);
        document.body.addEventListener("touchmove", function (e) {
            if (e.target == canvas) {
                e.preventDefault();
            }
        }, false);

        (function drawLoop() {
            requestAnimFrame(drawLoop);
            renderCanvas();
        })();

        function clearCanvas() {
            canvas.width = canvas.width;
            var ctx = canvas.getContext("2d");
            ctx.strokeStyle = "#222222";
            ctx.lineWidth = 4;
        }

        // Set up the UI
        var sigText = document.getElementById("sig-dataUrl");
        var sigImage = document.getElementById("sig-image");
        var clearBtn = document.getElementById("sig-clearBtn");
        var submitBtn = document.getElementById("sig-submitBtn");
        clearBtn.addEventListener("click", function (e) {
            clearCanvas();
        }, false);
        submitBtn.addEventListener("click", function (e) {
            page2.Loading(true);
            var dataUrl = canvas.toDataURL();
            if (dataUrl.length > 2500) {
                var dataToPost = JSON.parse(localStorage.CustomerInput);
                dataToPost[0].Signature = dataUrl;
                page2.Signature = dataUrl;
                dataToPost[0].Status = 2;
                PostCustomer(dataToPost);
            }
            else {
                clearCanvas();
                page2.Loading(false);
                iziToast.warning({
                    title: "Warning",
                    message: "Please Sign Again!",
                    timeout: 2000
                });
                return;
            }
        }, false);
    })();

    function PostCustomer(FastCheckInModel) {
        FastCheckInModel[0].ClientName = localStorage.ConfigGroupName;
        FastCheckInModel[0].User = "Android";
        var FastCheckInExtModel = {};
        var restModel = JSON.parse(localStorage.baseinfo);
        FastCheckInExtModel.HotelId = restModel.HotelId;
        FastCheckInExtModel.Mode = restModel.Mode;
        FastCheckInExtModel.Status = restModel.Status;
        FastCheckInExtModel.Group = restModel.Group;
        FastCheckInExtModel.String1 = localStorage.ConfigString1;
        FastCheckInExtModel.Count = restModel.Count;
        FastCheckInExtModel.HotelDescription = restModel.HotelDescription;
        FastCheckInExtModel.FormFastCheckInModelList = FastCheckInModel;
        $.ajax({
            url: localStorage.ConfigURL + "api/MainActions/PostFromMobile",
            cache: false,
            type: "POST",
            crossdomain: true,
            dataType: "json",
            ContentType: "application/json; charset=utf-8",
            data: FastCheckInExtModel,
             success: function (response) {
                 if (response !== undefined && response !== null) {
                     page2.Loading(false);
                     //Navigate To Thank You Page
                     setTimeout(function () {
                         var link = localStorage.ConfigURL + "ThankYou/GetSettings?hotelId=" + localStorage.ConfigHotelName;
                         page2.Loading(false);
                         window.location.href = link;
                     }, 1500);
                 }
            },
            error: function (error) {
                console.log(error);
                SendClientError(error);
                iziToast.error({
                    title: 'Post Error',
                    message: error.responseJSON.title,
                    timeout: 5000
                });
                page2.Loading(false);
            }
        }).fail(function (message) {
            if (message.status != 200) {
                console.log(message);
            }
        });
    }

     //Send Error Message to Api If PostCustomer Failed
    function SendClientError(error) {
        var ClentErrorModel = {};
        ClentErrorModel.HotelId = page2.baseInfoModel().HotelId;
        ClentErrorModel.String1 = page2.baseInfoModel().String1;
        ClentErrorModel.Group = page2.baseInfoModel().Group;
        ClentErrorModel.Description = "Error Posting Customer Data in Signature: ";
        ClentErrorModel.Error = error.responseText;
        $.ajax({
            url: localStorage.ConfigURL + "api/MainActions/ClientError",
            cache: false,
            type: "POST",
            crossdomain: false,
            dataType: "json",
            ContentType: "application/json",
            data: ClentErrorModel,
            success: function (response) {
                console.log("Post Customer Data Error Send Successfully!");
            },
            error: function (error) {
                console.log(error);
            }
        }).fail(function (message) {
            if (message.status != 200) {
                console.log(message);
            }
        });
    }
</script>






